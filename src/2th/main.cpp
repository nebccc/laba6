#include <iostream>
#include <sstream>
#include <iomanip>
#include <vector>
#include <algorithm>

using namespace std;

string init();
string convertToBytes(const string& word);
vector<vector<unsigned char>> createMatrix(const string& hex_str);
vector<vector<unsigned char>> transposeMatrix(const vector<vector<unsigned char>>& matrix);
void subBytes(vector<vector<unsigned char>>& state);
void shiftRows(vector<vector<unsigned char>>& state);
void mixColumns(vector<vector<unsigned char>>& state);
void addRoundKey(vector<vector<unsigned char>>& state, const vector<vector<unsigned char>>& key);
void invSubBytes(vector<vector<unsigned char>>& state);
void invShiftRows(vector<vector<unsigned char>>& state);
void invMixColumns(vector<vector<unsigned char>>& state);
vector<vector<unsigned char>> keyExpansion(const vector<vector<unsigned char>>& key);
unsigned char gmul(unsigned char a, unsigned char b);

unsigned char sBox[] =
	{ /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */ 
		0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, /*0*/  
		0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, /*1*/
		0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, /*2*/ 
		0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, /*3*/ 
		0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, /*4*/ 
		0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, /*5*/
		0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, /*6*/  
		0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, /*7*/ 
		0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, /*8*/ 
		0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, /*9*/ 
		0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, /*a*/
		0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, /*b*/
		0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, /*c*/ 
		0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, /*d*/
		0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, /*e*/ 
		0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  /*f*/
	};

unsigned char invsBox[256] = 
	{ /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f  */  
		0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb, /*0*/ 
		0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb, /*1*/
		0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e, /*2*/ 
		0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25, /*3*/ 
		0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92, /*4*/ 
		0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84, /*5*/ 
		0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06, /*6*/ 
		0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b, /*7*/
		0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73, /*8*/ 
		0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e, /*9*/
		0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b, /*a*/
		0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4, /*b*/ 
		0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f, /*c*/ 
		0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef, /*d*/ 
		0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61, /*e*/ 
		0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d  /*f*/
	};

int main(void) {
    string input_key;
    string input_str;

    cout << "Введите ключ:" << "\n";
    input_key = init();

    cout << "Введите сообщение:" << "\n";
    input_str = init();

    string hex_key = convertToBytes(input_key);
    string hex_str = convertToBytes(input_str);

    vector<vector<unsigned char>> message_matrix = createMatrix(hex_str);
    vector<vector<unsigned char>> key_matrix = createMatrix(hex_key);

    vector<vector<unsigned char>> expanded_key = keyExpansion(key_matrix);

    // Perform encryption
    addRoundKey(message_matrix, key_matrix);
    for (int round = 1; round < 10; ++round) {
        subBytes(message_matrix);
        shiftRows(message_matrix);
        mixColumns(message_matrix);
        addRoundKey(message_matrix, expanded_key);
    }
    subBytes(message_matrix);
    shiftRows(message_matrix);
    addRoundKey(message_matrix, expanded_key);

    cout << "Зашифрованное сообщение: ";
    for (const auto& row : message_matrix) {
        for (unsigned char val : row) {
            cout << hex << setw(2) << setfill('0') << (int)val;
        }
    }
    cout << endl;

    // Perform decryption
    addRoundKey(message_matrix, expanded_key);
    for (int round = 9; round > 0; --round) {
        invShiftRows(message_matrix);
        invSubBytes(message_matrix);
        addRoundKey(message_matrix, expanded_key);
        invMixColumns(message_matrix);
    }
    invShiftRows(message_matrix);
    invSubBytes(message_matrix);
    addRoundKey(message_matrix, key_matrix);

    cout << "Расшифрованное сообщение: ";
    for (const auto& row : message_matrix) {
        for (unsigned char val : row) {
            cout << (char)val;
        }
    }
    cout << endl;

    return 0;
}

string init() {
    string str;

    cout << "(Строка должна быть не больше 16 символов): ";

    while (true) {
        getline(cin, str);

        if (str.length() > 16) {
            cout << "Строка больше чем 16 символов, попробуйте еще: ";
        } else {
            break;
        }
    }
    return str;
}

string convertToBytes(const string& word) {
    stringstream ss;
    size_t len = word.length();

    for (size_t i = 0; i < 16; i++) {
        if (i < len) {
            ss << hex << setw(2) << setfill('0') << (int)word[i];
        } else {
            ss << "00"; // Дополняем нулями
        }
    }

    string hex_str = ss.str();

    return hex_str;
}

vector<vector<unsigned char>> createMatrix(const string& hex_str) {
    vector<vector<unsigned char>> matrix(4, vector<unsigned char>(4));

    for (int i = 0; i < 16; i++) {
        string byteString = hex_str.substr(i * 2, 2);
        unsigned char byte = (unsigned char) strtol(byteString.c_str(), nullptr, 16);
        matrix[i / 4][i % 4] = byte;
    }

    return matrix;
}

vector<vector<unsigned char>> transposeMatrix(const vector<vector<unsigned char>>& matrix) {
    vector<vector<unsigned char>> transposed(matrix[0].size(), vector<unsigned char>(matrix.size()));

    for (size_t i = 0; i < matrix.size(); ++i) {
        for (size_t j = 0; j < matrix[i].size(); ++j) {
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}

void subBytes(vector<vector<unsigned char>>& state) {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            state[i][j] = sBox[state[i][j]];
        }
    }
}

void invSubBytes(vector<vector<unsigned char>>& state) {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            state[i][j] = invsBox[state[i][j]];
        }
    }
}

void shiftRows(vector<vector<unsigned char>>& state) {
    for (int i = 1; i < 4; ++i) {
        std::rotate(state[i].begin(), state[i].begin() + i, state[i].end());
    }
}

void invShiftRows(vector<vector<unsigned char>>& state) {
    for (int i = 1; i < 4; ++i) {
        std::rotate(state[i].begin(), state[i].begin() + (4 - i), state[i].end());
    }
}

void mixColumns(vector<vector<unsigned char>>& state) {
    for (int i = 0; i < 4; ++i) {
        unsigned char a[4];
        unsigned char b[4];
        unsigned char h;

        for (int c = 0; c < 4; ++c) {
            a[c] = state[c][i];
            h = (unsigned char)((signed char)state[c][i] >> 7);
            b[c] = state[c][i] << 1;
            b[c] ^= 0x1B & h;
        }

        state[0][i] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
        state[1][i] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
        state[2][i] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
        state[3][i] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
    }
}

void invMixColumns(vector<vector<unsigned char>>& state) {
    for (int i = 0; i < 4; ++i) {
        unsigned char a[4];
        unsigned char b[4];

        for (int c = 0; c < 4; ++c) {
            a[c] = state[c][i];
        }

        b[0] = gmul(a[0], 0x0e) ^ gmul(a[1], 0x0b) ^ gmul(a[2], 0x0d) ^ gmul(a[3], 0x09);
        b[1] = gmul(a[0], 0x09) ^ gmul(a[1], 0x0e) ^ gmul(a[2], 0x0b) ^ gmul(a[3], 0x0d);
        b[2] = gmul(a[0], 0x0d) ^ gmul(a[1], 0x09) ^ gmul(a[2], 0x0e) ^ gmul(a[3], 0x0b);
        b[3] = gmul(a[0], 0x0b) ^ gmul(a[1], 0x0d) ^ gmul(a[2], 0x09) ^ gmul(a[3], 0x0e);

        for (int c = 0; c < 4; ++c) {
            state[c][i] = b[c];
        }
    }
}

void addRoundKey(vector<vector<unsigned char>>& state, const vector<vector<unsigned char>>& key) {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            state[i][j] ^= key[i][j];
        }
    }
}

vector<vector<unsigned char>> keyExpansion(const vector<vector<unsigned char>>& key) {
    // Simplified key expansion (normally it's more complex and covers all rounds)
    vector<vector<unsigned char>> expandedKey(4, vector<unsigned char>(4));
    // Copy initial key
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            expandedKey[i][j] = key[i][j];
        }
    }
    return expandedKey;
}

unsigned char gmul(unsigned char a, unsigned char b) {
    unsigned char p = 0;
    unsigned char counter;
    unsigned char hi_bit_set;
    for (counter = 0; counter < 8; counter++) {
        if (b & 1) {
            p ^= a;
        }
        hi_bit_set = (a & 0x80);
        a <<= 1;
        if (hi_bit_set) {
            a ^= 0x1b;
        }
        b >>= 1;
    }
    return p;
}